// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	department "HRSystem/src/domain/department"
	entity "HRSystem/src/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockDepartmentUsecase is an autogenerated mock type for the DepartmentUsecase type
type MockDepartmentUsecase struct {
	mock.Mock
}

type MockDepartmentUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDepartmentUsecase) EXPECT() *MockDepartmentUsecase_Expecter {
	return &MockDepartmentUsecase_Expecter{mock: &_m.Mock}
}

// CreateDepartment provides a mock function with given fields: userID, req
func (_m *MockDepartmentUsecase) CreateDepartment(userID uint, req department.DepartmentCreateReq) error {
	ret := _m.Called(userID, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateDepartment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, department.DepartmentCreateReq) error); ok {
		r0 = rf(userID, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDepartmentUsecase_CreateDepartment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDepartment'
type MockDepartmentUsecase_CreateDepartment_Call struct {
	*mock.Call
}

// CreateDepartment is a helper method to define mock.On call
//   - userID uint
//   - req department.DepartmentCreateReq
func (_e *MockDepartmentUsecase_Expecter) CreateDepartment(userID interface{}, req interface{}) *MockDepartmentUsecase_CreateDepartment_Call {
	return &MockDepartmentUsecase_CreateDepartment_Call{Call: _e.mock.On("CreateDepartment", userID, req)}
}

func (_c *MockDepartmentUsecase_CreateDepartment_Call) Run(run func(userID uint, req department.DepartmentCreateReq)) *MockDepartmentUsecase_CreateDepartment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(department.DepartmentCreateReq))
	})
	return _c
}

func (_c *MockDepartmentUsecase_CreateDepartment_Call) Return(_a0 error) *MockDepartmentUsecase_CreateDepartment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDepartmentUsecase_CreateDepartment_Call) RunAndReturn(run func(uint, department.DepartmentCreateReq) error) *MockDepartmentUsecase_CreateDepartment_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllDepartments provides a mock function with given fields: userID
func (_m *MockDepartmentUsecase) GetAllDepartments(userID uint) ([]entity.Department, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllDepartments")
	}

	var r0 []entity.Department
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]entity.Department, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) []entity.Department); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Department)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDepartmentUsecase_GetAllDepartments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllDepartments'
type MockDepartmentUsecase_GetAllDepartments_Call struct {
	*mock.Call
}

// GetAllDepartments is a helper method to define mock.On call
//   - userID uint
func (_e *MockDepartmentUsecase_Expecter) GetAllDepartments(userID interface{}) *MockDepartmentUsecase_GetAllDepartments_Call {
	return &MockDepartmentUsecase_GetAllDepartments_Call{Call: _e.mock.On("GetAllDepartments", userID)}
}

func (_c *MockDepartmentUsecase_GetAllDepartments_Call) Run(run func(userID uint)) *MockDepartmentUsecase_GetAllDepartments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockDepartmentUsecase_GetAllDepartments_Call) Return(_a0 []entity.Department, _a1 error) *MockDepartmentUsecase_GetAllDepartments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDepartmentUsecase_GetAllDepartments_Call) RunAndReturn(run func(uint) ([]entity.Department, error)) *MockDepartmentUsecase_GetAllDepartments_Call {
	_c.Call.Return(run)
	return _c
}

// Invite provides a mock function with given fields: dept, userID
func (_m *MockDepartmentUsecase) Invite(dept entity.Department, userID uint) error {
	ret := _m.Called(dept, userID)

	if len(ret) == 0 {
		panic("no return value specified for Invite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Department, uint) error); ok {
		r0 = rf(dept, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDepartmentUsecase_Invite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Invite'
type MockDepartmentUsecase_Invite_Call struct {
	*mock.Call
}

// Invite is a helper method to define mock.On call
//   - dept entity.Department
//   - userID uint
func (_e *MockDepartmentUsecase_Expecter) Invite(dept interface{}, userID interface{}) *MockDepartmentUsecase_Invite_Call {
	return &MockDepartmentUsecase_Invite_Call{Call: _e.mock.On("Invite", dept, userID)}
}

func (_c *MockDepartmentUsecase_Invite_Call) Run(run func(dept entity.Department, userID uint)) *MockDepartmentUsecase_Invite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.Department), args[1].(uint))
	})
	return _c
}

func (_c *MockDepartmentUsecase_Invite_Call) Return(_a0 error) *MockDepartmentUsecase_Invite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDepartmentUsecase_Invite_Call) RunAndReturn(run func(entity.Department, uint) error) *MockDepartmentUsecase_Invite_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDepartmentUsecase creates a new instance of MockDepartmentUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDepartmentUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDepartmentUsecase {
	mock := &MockDepartmentUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
