// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	auth "HRSystem/src/domain/auth"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockAuthUsecase is an autogenerated mock type for the AuthUsecase type
type MockAuthUsecase struct {
	mock.Mock
}

type MockAuthUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthUsecase) EXPECT() *MockAuthUsecase_Expecter {
	return &MockAuthUsecase_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, req
func (_m *MockAuthUsecase) Login(ctx context.Context, req auth.LoginRequest) (string, uint, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 uint
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, auth.LoginRequest) (string, uint, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, auth.LoginRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, auth.LoginRequest) uint); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(uint)
	}

	if rf, ok := ret.Get(2).(func(context.Context, auth.LoginRequest) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAuthUsecase_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockAuthUsecase_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - req auth.LoginRequest
func (_e *MockAuthUsecase_Expecter) Login(ctx interface{}, req interface{}) *MockAuthUsecase_Login_Call {
	return &MockAuthUsecase_Login_Call{Call: _e.mock.On("Login", ctx, req)}
}

func (_c *MockAuthUsecase_Login_Call) Run(run func(ctx context.Context, req auth.LoginRequest)) *MockAuthUsecase_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(auth.LoginRequest))
	})
	return _c
}

func (_c *MockAuthUsecase_Login_Call) Return(_a0 string, _a1 uint, _a2 error) *MockAuthUsecase_Login_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAuthUsecase_Login_Call) RunAndReturn(run func(context.Context, auth.LoginRequest) (string, uint, error)) *MockAuthUsecase_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: ctx, userID
func (_m *MockAuthUsecase) Logout(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthUsecase_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type MockAuthUsecase_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockAuthUsecase_Expecter) Logout(ctx interface{}, userID interface{}) *MockAuthUsecase_Logout_Call {
	return &MockAuthUsecase_Logout_Call{Call: _e.mock.On("Logout", ctx, userID)}
}

func (_c *MockAuthUsecase_Logout_Call) Run(run func(ctx context.Context, userID string)) *MockAuthUsecase_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthUsecase_Logout_Call) Return(_a0 error) *MockAuthUsecase_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthUsecase_Logout_Call) RunAndReturn(run func(context.Context, string) error) *MockAuthUsecase_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: req
func (_m *MockAuthUsecase) Register(req auth.RegisterRequest) error {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(auth.RegisterRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthUsecase_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockAuthUsecase_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - req auth.RegisterRequest
func (_e *MockAuthUsecase_Expecter) Register(req interface{}) *MockAuthUsecase_Register_Call {
	return &MockAuthUsecase_Register_Call{Call: _e.mock.On("Register", req)}
}

func (_c *MockAuthUsecase_Register_Call) Run(run func(req auth.RegisterRequest)) *MockAuthUsecase_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(auth.RegisterRequest))
	})
	return _c
}

func (_c *MockAuthUsecase_Register_Call) Return(_a0 error) *MockAuthUsecase_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthUsecase_Register_Call) RunAndReturn(run func(auth.RegisterRequest) error) *MockAuthUsecase_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthUsecase creates a new instance of MockAuthUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthUsecase {
	mock := &MockAuthUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
