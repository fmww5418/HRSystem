// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	leave "HRSystem/src/domain/leave"
	entity "HRSystem/src/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockLeaveUsecase is an autogenerated mock type for the LeaveUsecase type
type MockLeaveUsecase struct {
	mock.Mock
}

type MockLeaveUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLeaveUsecase) EXPECT() *MockLeaveUsecase_Expecter {
	return &MockLeaveUsecase_Expecter{mock: &_m.Mock}
}

// CreateLeaveRequest provides a mock function with given fields: userID, req
func (_m *MockLeaveUsecase) CreateLeaveRequest(userID uint, req leave.LeaveRequestInput) error {
	ret := _m.Called(userID, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateLeaveRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, leave.LeaveRequestInput) error); ok {
		r0 = rf(userID, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLeaveUsecase_CreateLeaveRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLeaveRequest'
type MockLeaveUsecase_CreateLeaveRequest_Call struct {
	*mock.Call
}

// CreateLeaveRequest is a helper method to define mock.On call
//   - userID uint
//   - req leave.LeaveRequestInput
func (_e *MockLeaveUsecase_Expecter) CreateLeaveRequest(userID interface{}, req interface{}) *MockLeaveUsecase_CreateLeaveRequest_Call {
	return &MockLeaveUsecase_CreateLeaveRequest_Call{Call: _e.mock.On("CreateLeaveRequest", userID, req)}
}

func (_c *MockLeaveUsecase_CreateLeaveRequest_Call) Run(run func(userID uint, req leave.LeaveRequestInput)) *MockLeaveUsecase_CreateLeaveRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(leave.LeaveRequestInput))
	})
	return _c
}

func (_c *MockLeaveUsecase_CreateLeaveRequest_Call) Return(_a0 error) *MockLeaveUsecase_CreateLeaveRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLeaveUsecase_CreateLeaveRequest_Call) RunAndReturn(run func(uint, leave.LeaveRequestInput) error) *MockLeaveUsecase_CreateLeaveRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllLeaveRequests provides a mock function with no fields
func (_m *MockLeaveUsecase) GetAllLeaveRequests() ([]entity.Request, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllLeaveRequests")
	}

	var r0 []entity.Request
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.Request, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.Request); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Request)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLeaveUsecase_GetAllLeaveRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllLeaveRequests'
type MockLeaveUsecase_GetAllLeaveRequests_Call struct {
	*mock.Call
}

// GetAllLeaveRequests is a helper method to define mock.On call
func (_e *MockLeaveUsecase_Expecter) GetAllLeaveRequests() *MockLeaveUsecase_GetAllLeaveRequests_Call {
	return &MockLeaveUsecase_GetAllLeaveRequests_Call{Call: _e.mock.On("GetAllLeaveRequests")}
}

func (_c *MockLeaveUsecase_GetAllLeaveRequests_Call) Run(run func()) *MockLeaveUsecase_GetAllLeaveRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLeaveUsecase_GetAllLeaveRequests_Call) Return(_a0 []entity.Request, _a1 error) *MockLeaveUsecase_GetAllLeaveRequests_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLeaveUsecase_GetAllLeaveRequests_Call) RunAndReturn(run func() ([]entity.Request, error)) *MockLeaveUsecase_GetAllLeaveRequests_Call {
	_c.Call.Return(run)
	return _c
}

// GetLeaveRequestByID provides a mock function with given fields: id
func (_m *MockLeaveUsecase) GetLeaveRequestByID(id uint) (entity.Request, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetLeaveRequestByID")
	}

	var r0 entity.Request
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (entity.Request, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) entity.Request); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.Request)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLeaveUsecase_GetLeaveRequestByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLeaveRequestByID'
type MockLeaveUsecase_GetLeaveRequestByID_Call struct {
	*mock.Call
}

// GetLeaveRequestByID is a helper method to define mock.On call
//   - id uint
func (_e *MockLeaveUsecase_Expecter) GetLeaveRequestByID(id interface{}) *MockLeaveUsecase_GetLeaveRequestByID_Call {
	return &MockLeaveUsecase_GetLeaveRequestByID_Call{Call: _e.mock.On("GetLeaveRequestByID", id)}
}

func (_c *MockLeaveUsecase_GetLeaveRequestByID_Call) Run(run func(id uint)) *MockLeaveUsecase_GetLeaveRequestByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockLeaveUsecase_GetLeaveRequestByID_Call) Return(_a0 entity.Request, _a1 error) *MockLeaveUsecase_GetLeaveRequestByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLeaveUsecase_GetLeaveRequestByID_Call) RunAndReturn(run func(uint) (entity.Request, error)) *MockLeaveUsecase_GetLeaveRequestByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLeaveRequestStatus provides a mock function with given fields: id, operatorUserID, req
func (_m *MockLeaveUsecase) UpdateLeaveRequestStatus(id uint, operatorUserID uint, req leave.UpdateLeaveStatusInput) error {
	ret := _m.Called(id, operatorUserID, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLeaveRequestStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint, leave.UpdateLeaveStatusInput) error); ok {
		r0 = rf(id, operatorUserID, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLeaveUsecase_UpdateLeaveRequestStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLeaveRequestStatus'
type MockLeaveUsecase_UpdateLeaveRequestStatus_Call struct {
	*mock.Call
}

// UpdateLeaveRequestStatus is a helper method to define mock.On call
//   - id uint
//   - operatorUserID uint
//   - req leave.UpdateLeaveStatusInput
func (_e *MockLeaveUsecase_Expecter) UpdateLeaveRequestStatus(id interface{}, operatorUserID interface{}, req interface{}) *MockLeaveUsecase_UpdateLeaveRequestStatus_Call {
	return &MockLeaveUsecase_UpdateLeaveRequestStatus_Call{Call: _e.mock.On("UpdateLeaveRequestStatus", id, operatorUserID, req)}
}

func (_c *MockLeaveUsecase_UpdateLeaveRequestStatus_Call) Run(run func(id uint, operatorUserID uint, req leave.UpdateLeaveStatusInput)) *MockLeaveUsecase_UpdateLeaveRequestStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(uint), args[2].(leave.UpdateLeaveStatusInput))
	})
	return _c
}

func (_c *MockLeaveUsecase_UpdateLeaveRequestStatus_Call) Return(_a0 error) *MockLeaveUsecase_UpdateLeaveRequestStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLeaveUsecase_UpdateLeaveRequestStatus_Call) RunAndReturn(run func(uint, uint, leave.UpdateLeaveStatusInput) error) *MockLeaveUsecase_UpdateLeaveRequestStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLeaveUsecase creates a new instance of MockLeaveUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLeaveUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLeaveUsecase {
	mock := &MockLeaveUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
