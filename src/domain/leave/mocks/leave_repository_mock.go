// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	entity "HRSystem/src/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockLeaveRepository is an autogenerated mock type for the LeaveRepository type
type MockLeaveRepository struct {
	mock.Mock
}

type MockLeaveRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLeaveRepository) EXPECT() *MockLeaveRepository_Expecter {
	return &MockLeaveRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: leaveRequest
func (_m *MockLeaveRepository) Create(leaveRequest entity.Request) error {
	ret := _m.Called(leaveRequest)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Request) error); ok {
		r0 = rf(leaveRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLeaveRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockLeaveRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - leaveRequest entity.Request
func (_e *MockLeaveRepository_Expecter) Create(leaveRequest interface{}) *MockLeaveRepository_Create_Call {
	return &MockLeaveRepository_Create_Call{Call: _e.mock.On("Create", leaveRequest)}
}

func (_c *MockLeaveRepository_Create_Call) Run(run func(leaveRequest entity.Request)) *MockLeaveRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.Request))
	})
	return _c
}

func (_c *MockLeaveRepository_Create_Call) Return(_a0 error) *MockLeaveRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLeaveRepository_Create_Call) RunAndReturn(run func(entity.Request) error) *MockLeaveRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function with no fields
func (_m *MockLeaveRepository) FindAll() ([]entity.Request, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []entity.Request
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.Request, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.Request); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Request)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLeaveRepository_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockLeaveRepository_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
func (_e *MockLeaveRepository_Expecter) FindAll() *MockLeaveRepository_FindAll_Call {
	return &MockLeaveRepository_FindAll_Call{Call: _e.mock.On("FindAll")}
}

func (_c *MockLeaveRepository_FindAll_Call) Run(run func()) *MockLeaveRepository_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLeaveRepository_FindAll_Call) Return(_a0 []entity.Request, _a1 error) *MockLeaveRepository_FindAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLeaveRepository_FindAll_Call) RunAndReturn(run func() ([]entity.Request, error)) *MockLeaveRepository_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: id
func (_m *MockLeaveRepository) FindByID(id uint) (entity.Request, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 entity.Request
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (entity.Request, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) entity.Request); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.Request)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLeaveRepository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockLeaveRepository_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - id uint
func (_e *MockLeaveRepository_Expecter) FindByID(id interface{}) *MockLeaveRepository_FindByID_Call {
	return &MockLeaveRepository_FindByID_Call{Call: _e.mock.On("FindByID", id)}
}

func (_c *MockLeaveRepository_FindByID_Call) Run(run func(id uint)) *MockLeaveRepository_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockLeaveRepository_FindByID_Call) Return(_a0 entity.Request, _a1 error) *MockLeaveRepository_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLeaveRepository_FindByID_Call) RunAndReturn(run func(uint) (entity.Request, error)) *MockLeaveRepository_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function with given fields: id, status
func (_m *MockLeaveRepository) UpdateStatus(id uint, status entity.RequestStatus) error {
	ret := _m.Called(id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, entity.RequestStatus) error); ok {
		r0 = rf(id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLeaveRepository_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type MockLeaveRepository_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - id uint
//   - status entity.RequestStatus
func (_e *MockLeaveRepository_Expecter) UpdateStatus(id interface{}, status interface{}) *MockLeaveRepository_UpdateStatus_Call {
	return &MockLeaveRepository_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", id, status)}
}

func (_c *MockLeaveRepository_UpdateStatus_Call) Run(run func(id uint, status entity.RequestStatus)) *MockLeaveRepository_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(entity.RequestStatus))
	})
	return _c
}

func (_c *MockLeaveRepository_UpdateStatus_Call) Return(_a0 error) *MockLeaveRepository_UpdateStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLeaveRepository_UpdateStatus_Call) RunAndReturn(run func(uint, entity.RequestStatus) error) *MockLeaveRepository_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLeaveRepository creates a new instance of MockLeaveRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLeaveRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLeaveRepository {
	mock := &MockLeaveRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
