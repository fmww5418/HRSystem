// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	entity "HRSystem/src/entity"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// MockOrganizationRepository is an autogenerated mock type for the OrganizationRepository type
type MockOrganizationRepository struct {
	mock.Mock
}

type MockOrganizationRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrganizationRepository) EXPECT() *MockOrganizationRepository_Expecter {
	return &MockOrganizationRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0
func (_m *MockOrganizationRepository) Create(_a0 entity.Organization) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Organization) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrganizationRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockOrganizationRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 entity.Organization
func (_e *MockOrganizationRepository_Expecter) Create(_a0 interface{}) *MockOrganizationRepository_Create_Call {
	return &MockOrganizationRepository_Create_Call{Call: _e.mock.On("Create", _a0)}
}

func (_c *MockOrganizationRepository_Create_Call) Run(run func(_a0 entity.Organization)) *MockOrganizationRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.Organization))
	})
	return _c
}

func (_c *MockOrganizationRepository_Create_Call) Return(_a0 error) *MockOrganizationRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrganizationRepository_Create_Call) RunAndReturn(run func(entity.Organization) error) *MockOrganizationRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWithTx provides a mock function with given fields: tx, org
func (_m *MockOrganizationRepository) CreateWithTx(tx *gorm.DB, org *entity.Organization) error {
	ret := _m.Called(tx, org)

	if len(ret) == 0 {
		panic("no return value specified for CreateWithTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *entity.Organization) error); ok {
		r0 = rf(tx, org)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrganizationRepository_CreateWithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWithTx'
type MockOrganizationRepository_CreateWithTx_Call struct {
	*mock.Call
}

// CreateWithTx is a helper method to define mock.On call
//   - tx *gorm.DB
//   - org *entity.Organization
func (_e *MockOrganizationRepository_Expecter) CreateWithTx(tx interface{}, org interface{}) *MockOrganizationRepository_CreateWithTx_Call {
	return &MockOrganizationRepository_CreateWithTx_Call{Call: _e.mock.On("CreateWithTx", tx, org)}
}

func (_c *MockOrganizationRepository_CreateWithTx_Call) Run(run func(tx *gorm.DB, org *entity.Organization)) *MockOrganizationRepository_CreateWithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*entity.Organization))
	})
	return _c
}

func (_c *MockOrganizationRepository_CreateWithTx_Call) Return(_a0 error) *MockOrganizationRepository_CreateWithTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrganizationRepository_CreateWithTx_Call) RunAndReturn(run func(*gorm.DB, *entity.Organization) error) *MockOrganizationRepository_CreateWithTx_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: _a0
func (_m *MockOrganizationRepository) FindByID(_a0 uint) (entity.Organization, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 entity.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (entity.Organization, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint) entity.Organization); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(entity.Organization)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrganizationRepository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockOrganizationRepository_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - _a0 uint
func (_e *MockOrganizationRepository_Expecter) FindByID(_a0 interface{}) *MockOrganizationRepository_FindByID_Call {
	return &MockOrganizationRepository_FindByID_Call{Call: _e.mock.On("FindByID", _a0)}
}

func (_c *MockOrganizationRepository_FindByID_Call) Run(run func(_a0 uint)) *MockOrganizationRepository_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockOrganizationRepository_FindByID_Call) Return(_a0 entity.Organization, _a1 error) *MockOrganizationRepository_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrganizationRepository_FindByID_Call) RunAndReturn(run func(uint) (entity.Organization, error)) *MockOrganizationRepository_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationIDByUserID provides a mock function with given fields: userID
func (_m *MockOrganizationRepository) GetOrganizationIDByUserID(userID uint) (uint, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationIDByUserID")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (uint, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) uint); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrganizationRepository_GetOrganizationIDByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationIDByUserID'
type MockOrganizationRepository_GetOrganizationIDByUserID_Call struct {
	*mock.Call
}

// GetOrganizationIDByUserID is a helper method to define mock.On call
//   - userID uint
func (_e *MockOrganizationRepository_Expecter) GetOrganizationIDByUserID(userID interface{}) *MockOrganizationRepository_GetOrganizationIDByUserID_Call {
	return &MockOrganizationRepository_GetOrganizationIDByUserID_Call{Call: _e.mock.On("GetOrganizationIDByUserID", userID)}
}

func (_c *MockOrganizationRepository_GetOrganizationIDByUserID_Call) Run(run func(userID uint)) *MockOrganizationRepository_GetOrganizationIDByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockOrganizationRepository_GetOrganizationIDByUserID_Call) Return(_a0 uint, _a1 error) *MockOrganizationRepository_GetOrganizationIDByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrganizationRepository_GetOrganizationIDByUserID_Call) RunAndReturn(run func(uint) (uint, error)) *MockOrganizationRepository_GetOrganizationIDByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// WithTransaction provides a mock function with given fields: fn
func (_m *MockOrganizationRepository) WithTransaction(fn func(*gorm.DB) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for WithTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*gorm.DB) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrganizationRepository_WithTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTransaction'
type MockOrganizationRepository_WithTransaction_Call struct {
	*mock.Call
}

// WithTransaction is a helper method to define mock.On call
//   - fn func(*gorm.DB) error
func (_e *MockOrganizationRepository_Expecter) WithTransaction(fn interface{}) *MockOrganizationRepository_WithTransaction_Call {
	return &MockOrganizationRepository_WithTransaction_Call{Call: _e.mock.On("WithTransaction", fn)}
}

func (_c *MockOrganizationRepository_WithTransaction_Call) Run(run func(fn func(*gorm.DB) error)) *MockOrganizationRepository_WithTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*gorm.DB) error))
	})
	return _c
}

func (_c *MockOrganizationRepository_WithTransaction_Call) Return(_a0 error) *MockOrganizationRepository_WithTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrganizationRepository_WithTransaction_Call) RunAndReturn(run func(func(*gorm.DB) error) error) *MockOrganizationRepository_WithTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOrganizationRepository creates a new instance of MockOrganizationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrganizationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrganizationRepository {
	mock := &MockOrganizationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
