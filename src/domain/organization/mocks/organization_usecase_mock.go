// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	entity "HRSystem/src/entity"

	mock "github.com/stretchr/testify/mock"

	organization "HRSystem/src/domain/organization"
)

// MockOrganizationUsecase is an autogenerated mock type for the OrganizationUsecase type
type MockOrganizationUsecase struct {
	mock.Mock
}

type MockOrganizationUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrganizationUsecase) EXPECT() *MockOrganizationUsecase_Expecter {
	return &MockOrganizationUsecase_Expecter{mock: &_m.Mock}
}

// CreateOrganization provides a mock function with given fields: userID, req
func (_m *MockOrganizationUsecase) CreateOrganization(userID uint, req organization.OrganizationCreateReq) error {
	ret := _m.Called(userID, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganization")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, organization.OrganizationCreateReq) error); ok {
		r0 = rf(userID, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrganizationUsecase_CreateOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganization'
type MockOrganizationUsecase_CreateOrganization_Call struct {
	*mock.Call
}

// CreateOrganization is a helper method to define mock.On call
//   - userID uint
//   - req organization.OrganizationCreateReq
func (_e *MockOrganizationUsecase_Expecter) CreateOrganization(userID interface{}, req interface{}) *MockOrganizationUsecase_CreateOrganization_Call {
	return &MockOrganizationUsecase_CreateOrganization_Call{Call: _e.mock.On("CreateOrganization", userID, req)}
}

func (_c *MockOrganizationUsecase_CreateOrganization_Call) Run(run func(userID uint, req organization.OrganizationCreateReq)) *MockOrganizationUsecase_CreateOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(organization.OrganizationCreateReq))
	})
	return _c
}

func (_c *MockOrganizationUsecase_CreateOrganization_Call) Return(_a0 error) *MockOrganizationUsecase_CreateOrganization_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrganizationUsecase_CreateOrganization_Call) RunAndReturn(run func(uint, organization.OrganizationCreateReq) error) *MockOrganizationUsecase_CreateOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationByID provides a mock function with given fields: id
func (_m *MockOrganizationUsecase) GetOrganizationByID(id uint) (entity.Organization, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationByID")
	}

	var r0 entity.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (entity.Organization, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) entity.Organization); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.Organization)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrganizationUsecase_GetOrganizationByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationByID'
type MockOrganizationUsecase_GetOrganizationByID_Call struct {
	*mock.Call
}

// GetOrganizationByID is a helper method to define mock.On call
//   - id uint
func (_e *MockOrganizationUsecase_Expecter) GetOrganizationByID(id interface{}) *MockOrganizationUsecase_GetOrganizationByID_Call {
	return &MockOrganizationUsecase_GetOrganizationByID_Call{Call: _e.mock.On("GetOrganizationByID", id)}
}

func (_c *MockOrganizationUsecase_GetOrganizationByID_Call) Run(run func(id uint)) *MockOrganizationUsecase_GetOrganizationByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockOrganizationUsecase_GetOrganizationByID_Call) Return(_a0 entity.Organization, _a1 error) *MockOrganizationUsecase_GetOrganizationByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrganizationUsecase_GetOrganizationByID_Call) RunAndReturn(run func(uint) (entity.Organization, error)) *MockOrganizationUsecase_GetOrganizationByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOrganizationUsecase creates a new instance of MockOrganizationUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrganizationUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrganizationUsecase {
	mock := &MockOrganizationUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
